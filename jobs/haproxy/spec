---
name: haproxy

description: "The HAProxy server can be used to terminate SSL in front of the Routers. Each HAProxy instance should point to multiple Routers."

packages:
- haproxy
- ttar

templates:
  haproxy_wrapper.erb:          bin/haproxy_wrapper
  reload.erb:                   bin/reload
  drain.erb:                    bin/drain
  pre-start.erb:                bin/pre-start
  bpm.yml:                      config/bpm.yml
  haproxy.config.erb:           config/haproxy.config
  certs.ttar.erb:               config/certs.ttar
  cidrs.ttar.erb:               config/cidrs.ttar
  ssl_redirect.map.erb:         config/ssl_redirect.map
  backend-ca-certs.erb:         config/backend-ca-certs.pem
  client-ca-certs.erb:          config/client-ca-certs.pem
  backend-crt.erb:              config/backend-crt.pem
  client-revocation-list.erb:   config/client-revocation-list.pem
  blacklist_cidrs.txt.erb:      config/blacklist_cidrs.txt
  whitelist_cidrs.txt.erb:      config/whitelist_cidrs.txt
  trusted_domain_cidrs.txt.erb: config/trusted_domain_cidrs.txt

consumes:
  - name: http_backend
    type: http-router
    optional: true

  - name: tcp_backend
    type: ssh_proxy
    optional: true

  - name: tcp_router
    type: tcp-router
    optional: true

properties:
  ha_proxy.nbthread:
    description: "Optional number of threads per VM"
    default: 1
  ha_proxy.syslog_server:
    description: "An IPv4 address optionally followed by a colon and a UDP port. It can also be an IPv6 address or filesystem path to a UNIX domain socket."
    default: "stdout"
  ha_proxy.log_max_length:
    description: "Optional maximum line length. Log lines larger than this value will be truncated before being sent."
    default: 1024
  ha_proxy.log_format:
    description: "The log format used when generating syslog messages."
    default: "raw"
  ha_proxy.log_level:
    description: "Log level"
    default: "info"
  ha_proxy.buffer_size_bytes:
    description: "Buffer size to use for requests, any requests larger than this (large cookies or query strings) will result in a gateway error"
    default: 16384
  ha_proxy.max_rewrite:
    description: "Buffer size to use for header rewriting or appending. The default of haproxy is min(1024,buffer_size_bytes/2). Will be set to buffer_size_bytes/2 by haproxy if it is set to a larger value"
  ha_proxy.internal_only_domains:
    description: "Array of domains for internal-only apps/services (not hostnames for the apps/services)"
    default: []
  ha_proxy.trusted_domain_cidrs:
    description: "Space separated trusted cidr blocks for internal_only_domains. You may alternatively provide a base64-encoded gzipped HAProxy cidr file, with each CIDR on a new line."
    default: 0.0.0.0/32
  ha_proxy.strict_sni:
    description: "Optional setting to decide whether the SSL/TLS negotiation is allowed only if the client provided an SNI which strict match a certificate. If set to true, the default certificate is not used"
    default: false
  ha_proxy.disable_domain_fronting:
    description: |
      Must be one of true, false, or "mtls_only"
      If set to true, it will prevent clients from setting a host header different from the SNI value for HTTPS and WSS (secured websockets) connections. This is called domain fronting and is mostly used by CDNs.
      If domain fronting is disabled, such requests will result in a 421 Misdirected Request error.
      If set to "mtls_only", the host header will only be checked against the SNI for mtls connections
      Example
        curl -H "Host: bob.com" https://alice.com    <-- This will result in a 421 Misdirected Request
    default: false
  ha_proxy.ssl_pem:
    description: |
      Array of private keys and certificates used for TLS handshakes with downstream clients. Each element in the array is an object containing fields 'cert_chain' and 'private_key',
      each of which supports a PEM block. Each element can also be a single string containing the cert chain and the private key.
    example:
      ssl_pem:
      - cert_chain: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        private_key: |
          -----BEGIN RSA PRIVATE KEY-----
          -----END RSA PRIVATE KEY-----
      - |
        -----BEGIN CERTIFICATE-----
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        -----END CERTIFICATE-----
        -----BEGIN RSA PRIVATE KEY-----
        -----END RSA PRIVATE KEY-----
    default: ~
  ha_proxy.crt_list:
    description: |
      Array of private keys and certificates used for TLS handshakes with downstream clients. Each element in the array is an object containing at least the field 'ssl_pem'.
      The field 'ssl_pem' itself is either an object containing fields 'cert_chain' and 'private_key', or a single string containing the cert chain and the private key.
      The following fields are optional:
      - 'alpn' (a optional array of strings). If both HTTP/2 and HTTP/1.1 are expected to be supported, both versions can be advertised, in order of preference
      - 'client_ca_file' (replaces ha_proxy.client_ca_file)
      - 'verify' (allowed values: [none|optional|required])
      - 'ssl_ciphers' (overrides ha_proxy.ssl_ciphers)
      - 'ssl_ciphersuites' (overrides ha_proxy.ssl_ciphersuites)
      - 'ssl_min_version' (allowed values: [SSLv3 | TLSv1.0 | TLSv1.1 | TLSv1.2 | TLSv1.3])
      - 'ssl_max_version' (allowed values: [SSLv3 | TLSv1.0 | TLSv1.1 | TLSv1.2 | TLSv1.3])
      - 'client_revocation_list' (replaces ha_proxy.client_revocation_list)
      - 'snifilter' (either a string or an array of strings)
      The global option ha_proxy.client_cert has to be set to 'true', if there are crt_list entries with mutual auth configuration ('client_ca_file', 'client_revocation_list' and 'verify'!='none')
      To avoid confusing configurations, it's not allowed to specify 'client_ca_file' and 'client_revocation_list' both globally AND in crt_list entries.
    example:
      crt_list:
      - ssl_pem: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN RSA PRIVATE KEY-----
          -----END RSA PRIVATE KEY-----
      - ssl_pem:
          cert_chain: |
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
          private_key: |
            -----BEGIN RSA PRIVATE KEY-----
            -----END RSA PRIVATE KEY-----
        client_ca_file: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        verify: required
        ssl_ciphers: AES:ALL:!aNULL:!eNULL:+RC4:@STRENGTH
        ssl_ciphersuites: TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl_min_version: TLSv1.2
        ssl_max_version: TLSv1.3
        alpn:
        - h2
        - http/1.1
        client_revocation_list: |
          -----BEGIN X509 CRL-----
          -----END X509 CRL-----
          -----BEGIN X509 CRL-----
          -----END X509 CRL-----
        snifilter:
        - "*.domain.tld"
        - "!secure.domain.tld"
    default: ~
  ha_proxy.ext_crt_list:
    description: |
      A flag denoting the use of additional certificates from external sources.
      If set to true the contents of an external crt-list file located at `ha_proxy.ext_crt_list_file` are
      added to the crt-list described by the `ha_proxy.crt_list` property. Please be aware that reloading external certificates does only work if haproxy is
      started in daemon mode. So this feature does not work if "haproxy.syslog_server" is set to "stdout". If using this feature but not using internal certs,
      you should set ha_proxy.crt_list to be an empty array
    default: false
  ha_proxy.ext_crt_list_file:
    description: |
      The location from which to load additional external certificates list
    default: "/var/vcap/jobs/haproxy/config/ssl/ext/crt-list"
  ha_proxy.ext_crt_list_timeout:
    description: |
      Timeout (in seconds) to wait for the external certificates list located at `ha_proxy.ext_crt_list_file` to appear during HAproxy startup
    default: 60
  ha_proxy.ext_crt_l