---
name: haproxy

description: "The HAProxy server can be used to terminate SSL in front of the Routers. Each HAProxy instance should point to multiple Routers."

packages:
- haproxy
- ttar

templates:
  haproxy_wrapper.erb:          bin/haproxy_wrapper
  reload.erb:                   bin/reload
  drain.erb:                    bin/drain
  pre-start.erb:                bin/pre-start
  bpm.yml:                      config/bpm.yml
  haproxy.config.erb:           config/haproxy.config
  certs.ttar.erb:               config/certs.ttar
  cidrs.ttar.erb:               config/cidrs.ttar
  ssl_redirect.map.erb:         config/ssl_redirect.map
  backend-ca-certs.erb:         config/backend-ca-certs.pem
  client-ca-certs.erb:          config/client-ca-certs.pem
  backend-crt.erb:              config/backend-crt.pem
  client-revocation-list.erb:   config/client-revocation-list.pem
  blacklist_cidrs.txt.erb:      config/blacklist_cidrs.txt
  whitelist_cidrs.txt.erb:      config/whitelist_cidrs.txt
  trusted_domain_cidrs.txt.erb: config/trusted_domain_cidrs.txt

consumes:
  - name: http_backend
    type: http-router
    optional: true

  - name: tcp_backend
    type: ssh_proxy
    optional: true

  - name: tcp_router
    type: tcp-router
    optional: true

properties:
  ha_proxy.nbthread:
    description: "Optional number of threads per VM"
    default: 1
  ha_proxy.syslog_server:
    description: "An IPv4 address optionally followed by a colon and a UDP port. It can also be an IPv6 address or filesystem path to a UNIX domain socket."
    default: "stdout"
  ha_proxy.log_max_length:
    description: "Optional maximum line length. Log lines larger than this value will be truncated before being sent."
    default: 1024
  ha_proxy.log_format:
    description: "The log format used when generating syslog messages."
    default: "raw"
  ha_proxy.log_level:
    description: "Log level"
    default: "info"
  ha_proxy.buffer_size_bytes:
    description: "Buffer size to use for requests, any requests larger than this (large cookies or query strings) will result in a gateway error"
    default: 16384
  ha_proxy.max_rewrite:
    description: "Buffer size to use for header rewriting or appending. The default of haproxy is min(1024,buffer_size_bytes/2). Will be set to buffer_size_bytes/2 by haproxy if it is set to a larger value"
  ha_proxy.internal_only_domains:
    description: "Array of domains for internal-only apps/services (not hostnames for the apps/services)"
    default: []
  ha_proxy.trusted_domain_cidrs:
    description: "Space separated trusted cidr blocks for internal_only_domains. You may alternatively provide a base64-encoded gzipped HAProxy cidr file, with each CIDR on a new line."
    default: 0.0.0.0/32
  ha_proxy.strict_sni:
    description: "Optional setting to decide whether the SSL/TLS negotiation is allowed only if the client provided an SNI which strict match a certificate. If set to true, the default certificate is not used"
    default: false
  ha_proxy.disable_domain_fronting:
    description: |
      Must be one of true, false, or "mtls_only"
      If set to true, it will prevent clients from setting a host header different from the SNI value for HTTPS and WSS (secured websockets) connections. This is called domain fronting and is mostly used by CDNs.
      If domain fronting is disabled, such requests will result in a 421 Misdirected Request error.
      If set to "mtls_only", the host header will only be checked against the SNI for mtls connections
      Example
        curl -H "Host: bob.com" https://alice.com    <-- This will result in a 421 Misdirected Request
    default: false
  ha_proxy.ssl_pem:
    description: |
      Array of private keys and certificates used for TLS handshakes with downstream clients. Each element in the array is an object containing fields 'cert_chain' and 'private_key',
      each of which supports a PEM block. Each element can also be a single string containing the cert chain and the private key.
    example:
      ssl_pem:
      - cert_chain: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        private_key: |
          -----BEGIN RSA PRIVATE KEY-----
          -----END RSA PRIVATE KEY-----
      - |
        -----BEGIN CERTIFICATE-----
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        -----END CERTIFICATE-----
        -----BEGIN RSA PRIVATE KEY-----
        -----END RSA PRIVATE KEY-----
    default: ~
  ha_proxy.crt_list:
    description: |
      Array of private keys and certificates used for TLS handshakes with downstream clients. Each element in the array is an object containing at least the field 'ssl_pem'.
      The field 'ssl_pem' itself is either an object containing fields 'cert_chain' and 'private_key', or a single string containing the cert chain and the private key.
      The following fields are optional:
      - 'alpn' (a optional array of strings). If both HTTP/2 and HTTP/1.1 are expected to be supported, both versions can be advertised, in order of preference
      - 'client_ca_file' (replaces ha_proxy.client_ca_file)
      - 'verify' (allowed values: [none|optional|required])
      - 'ssl_ciphers' (overrides ha_proxy.ssl_ciphers)
      - 'ssl_ciphersuites' (overrides ha_proxy.ssl_ciphersuites)
      - 'ssl_min_version' (allowed values: [SSLv3 | TLSv1.0 | TLSv1.1 | TLSv1.2 | TLSv1.3])
      - 'ssl_max_version' (allowed values: [SSLv3 | TLSv1.0 | TLSv1.1 | TLSv1.2 | TLSv1.3])
      - 'client_revocation_list' (replaces ha_proxy.client_revocation_list)
      - 'snifilter' (either a string or an array of strings)
      The global option ha_proxy.client_cert has to be set to 'true', if there are crt_list entries with mutual auth configuration ('client_ca_file', 'client_revocation_list' and 'verify'!='none')
      To avoid confusing configurations, it's not allowed to specify 'client_ca_file' and 'client_revocation_list' both globally AND in crt_list entries.
    example:
      crt_list:
      - ssl_pem: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN RSA PRIVATE KEY-----
          -----END RSA PRIVATE KEY-----
      - ssl_pem:
          cert_chain: |
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
          private_key: |
            -----BEGIN RSA PRIVATE KEY-----
            -----END RSA PRIVATE KEY-----
        client_ca_file: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        verify: required
        ssl_ciphers: AES:ALL:!aNULL:!eNULL:+RC4:@STRENGTH
        ssl_ciphersuites: TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl_min_version: TLSv1.2
        ssl_max_version: TLSv1.3
        alpn:
        - h2
        - http/1.1
        client_revocation_list: |
          -----BEGIN X509 CRL-----
          -----END X509 CRL-----
          -----BEGIN X509 CRL-----
          -----END X509 CRL-----
        snifilter:
        - "*.domain.tld"
        - "!secure.domain.tld"
    default: ~
  ha_proxy.ext_crt_list:
    description: |
      A flag denoting the use of additional certificates from external sources.
      If set to true the contents of an external crt-list file located at `ha_proxy.ext_crt_list_file` are
      added to the crt-list described by the `ha_proxy.crt_list` property. Please be aware that reloading external certificates does only work if haproxy is
      started in daemon mode. So this feature does not work if "haproxy.syslog_server" is set to "stdout". If using this feature but not using internal certs,
      you should set ha_proxy.crt_list to be an empty array
    default: false
  ha_proxy.ext_crt_list_file:
    description: |
      The location from which to load additional external certificates list
    default: "/var/vcap/jobs/haproxy/config/ssl/ext/crt-list"
  ha_proxy.ext_crt_list_timeout:
    description: |
      Timeout (in seconds) to wait for the external certificates list located at `ha_proxy.ext_crt_list_file` to appear during HAproxy startup
    default: 60
  ha_proxy.ext_crt_list_policy:
    description: |
      What to do if the external certificates list located at `ha_proxy.ext_crt_list_file` does not appear within the time
      denoted by `ha_proxy.ext_crt_list_timeout`. Set to either 'fail' (HAproxy will not start) or 'continue' (HAproxy will start without external certificates)
    default: "fail"
  ha_proxy.reload_idle_close_on_response:
    description: |
      This option makes HAproxy wait for another request on idle connections during reloads or restarts. Once the response is received, a "Connection: close" header
      is injected to signal to the client that this connection no longer usable and permitting a more graceful handling on the client's side. This has the downside
      that HAproxy may linger around for longer, waiting for a request on idle connections, so it should be used in conjunction with the "reload_hard_stop_after" option
      to limit that time. If set to false, idle connections will be terminated immediately during reloads or restarts.
    default: true
  ha_proxy.reload_hard_stop_after:
    description: |
      Defines the maximum time allowed to perform a clean soft-stop. This is used when issuing a reload via the "bin/reload" script. It limits the time for the
      old instance to finish existing connections before the instance is stopped.
    default: "5m"
  ha_proxy.reload_max_instances:
    description: |
      Sets the maximum number of instances to exist at the same time. In conjunction with "reload_hard_stop_after" this limits the number of reloads that can occur
      during a given period of time. Set this to the number of instances your machine can fit into memory at a time, minus a safety buffer. Set to 0 for no limit.
    default: 4
  ha_proxy.backend_ca_file:
    description: "Optional SSL CA certificate chain (PEM file) concatenated together for backend SSL servers, only used when one of the `backend_ssl` options is set to `verify`"
  ha_proxy.enable_health_check_http:
    description: "Optionally enable http health-check on `haproxy_ip:8080/health`. It shows `200 OK` if >0 backend servers are up. If used with ext_crt_list_timeout you should make sure that the deployment canary_watch_time and update_watch_time are configured to wait at least the number of seconds defined by ext_crt_list_timeout."
    default: false
  ha_proxy.disable_monit_health_check_http:
    description: "The HAProxy health check endpoint returns a healthy status if at least one backend server is responding. By default when enable_health_check_http: true, Bosh will consider the HAProxy VM unhealthy if the HAProxy health check returns an unhealthy status. In some cases this might not be desired, for example when deploying HAProxy before deploying the backend servers. To prevent Bosh from considering the HAProxy VM unhealthy when all backend servers are unhealthy set disable_monit_health_check_http: true. Note that this flag is ignored unless enable_health_check_http: true."
    default: false
  ha_proxy.health_check_port:
    description: "port for http health-check"
    default: 8080
  ha_proxy.disable_http:
    description: "Disable port 80 traffic"
    default: false
  ha_proxy.enable_4443:
    description: "Enables port 4443 for backwards compatibility with WSS-based apps using the old CF haproxy. If true you must provide a valid SSL config via ssl_pem or crt_list"
    default: false
  ha_proxy.https_redirect_domains:
    description: "For each domain in this array, a HTTPS redirect rule will be put in the config file. Redirect will be applied for all subdomains"
    default: []
  ha_proxy.https_redirect_all:
    description: "If this is set to 'true', a https redirect rule for all http calls will be put in the config file"
    default: false
  ha_proxy.ssl_ciphers:
    default: ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    description: "List of TLSv<=1.2 Ciphers for that are passed to HAProxy"
  ha_proxy.ssl_ciphersuites:
    example: TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    description: "List of TLSv1.3 Ciphers that are passed to HAProxy, requires at least openssl version 1.1.1"
  ha_proxy.hsts_enable:
    default: false
    description: "Enables HSTS(Strict-Transport-Security Header) for all the SSL/TLS listeners"
  ha_proxy.hsts_max_age:
    default: 31536000
    description: "max-age value for the Strict-Transport-Security header"
  ha_proxy.hsts_include_subdomains:
    default: false
    description: "This enables the includeSubDomains flag for HSTS."
  ha_proxy.hsts_preload:
    default: false
    description: "This enables the preload flag for HSTS"
  ha_proxy.default_dh_param:
    default: 2048
    description: "Maximum size of DH params when generating epmehmeral keys during key exchange"
  ha_proxy.disable_tls_tickets:
    default: true
    description: "Improve (Perfect) Forward Secrecy by disabling TLS tickets"
  ha_proxy.disable_tls_10:
    default: false
    description: "Disable TLS 1.0 in HA Proxy"
  ha_proxy.disable_tls_11:
    default: false
    description: "Disable TLS 1.1 in HA Proxy"
  ha_proxy.disable_tls_12:
    default: false
    description: "Disable TLS 1.2 in HA Proxy"
  ha_proxy.disable_tls_13:
    default: false
    description: "Disable TLS 1.3 in HA Proxy"
  ha_proxy.backend_match_http_protocol:
    default: false
    description: Uses the same version of HTTP for backend connections that was used for frontend connections (ie HTTP 1.1 or HTTP 2). Ignores the value of enable_http2. HTTP2 backend connections require that `ha_proxy.backend_ssl` is not `off`.
  ha_proxy.disable_backend_http2_websockets:
    default: false
    description: "Forward websockets to the backend servers using HTTP/1.1, never HTTP/2. Does not apply to custom routed_backend_servers. Works around https://github.com/cloudfoundry/routing-release/issues/230. Overrides backend_match_http_protocol for websockets."

  ha_proxy.connect_timeout:
    description: "Timeout (in floating point seconds) used on connections from haproxy to a backend, while waiting for the TCP handshake to complete + connection to establish"
    default:     5
  ha_proxy.client_timeout:
    description: "Timeout (in floating point seconds) used on connections from a client to haproxy that have gone inactive"
    default:     30
  ha_proxy.server_timeout:
    description: "Timeout (in floating point seconds) used on connections from haproxy to a backend, while waiting for data from the backend"
    default:     30
  ha_proxy.websocket_timeout:
    description: "Timeout (in floating point seconds) used on websocket/tunnel traffic, when both ends of the conversation have become inactive"
    default:     3600
  ha_proxy.keepalive_timeout:
    description: "Timeout (in floating point seconds) applied to any connection that is in an http-keepalive state, waiting for the next request to occur"
    default:     6
  ha_proxy.request_timeout:
    description: "Timeout (in floating point seconds) applied to any connection to limit the maximum time for a complete HTTP request (headers only). Used to limit DoS attacks that send data slowly to not trigger the client/server timeouts"
    default:     5
  ha_proxy.queue_timeout:
    description: "Timeout (in floating point seconds) used on any connection sitting in the pending queue, waiting to be sent to the backend, to limit its time being queued"
    default:     30

  ha_proxy.stats_enable:
    description: "If true, haproxy will enable a socket for stats. You can see the stats on `haproxy_ip:9000/haproxy_stats`. If multithreading is enabled (`ha_proxy.threads > 1`) haproxy will create a separate socket and stat page for each thread. Each stat page is reachable on a different port ranging from `9000` to `9000 + ha_proxy.threads - 1`."
    default: false
  ha_proxy.stats_bind:
    description: "Define listening address and port for the stats frontend. If multithreading is enabled (`ha_proxy.threads > 1`) multiple stat pages are available - one for each thread. You can see the stat page for each thread on a separate port - starting at the defined port number."
    default: "*:9000"
  ha_proxy.stats_user:
    description: "User name to authenticate haproxy stats"
  ha_proxy.stats_password:
    description: "Password to authenticate haproxy stats"
  ha_proxy.stats_uri:
    description: "URI used to access the stats UI."
    default: "haproxy_stats"
  ha_proxy.trusted_stats_cidrs:
    description: "Trusted ip range that can access the stats UI"
    default: 0.0.0.0/32

  ha_proxy.master_cli_enable:
    description: "If true, enables the master CLI which can be used to manage HAProxy"
    default: false
  ha_proxy.master_cli_bind:
    description: "IP and port or UNIX socket to bind master CLI to"
    default: "127.0.0.1:9001"

  ha_proxy.backend_servers:
    description: "Array of the router IPs acting as the HTTP/TCP backends (should include servers all Availability Zones being used)"
    default: []
  ha_proxy.backend_ssl:
    description: "Optionally enable SSL verification for backend servers, one of `verify`, `noverify`, any other value assumes no ssl backend.  Setting `verify` requires `ha_proxy.backend_ca_file` key to be set. Note that `off` will disable all backend HTTP2 support regardless of other properties."
    default: "off"
  ha_proxy.backend_ssl_verifyhost:
    description: "Optional hostname to verify in the x509 certificate subject for SSL-enabled backend servers.  Requires `ha_proxy.backend_ssl` is set to `verify` when using this."
  ha_proxy.backend_port:
    description: "Listening port for Router"
    default: 80
  ha_proxy.compress_types:
    description: "If this property is set, gzip compression will be activated for the mime types named in this property. definition like 'text/html text/plain text/css'"
    default: ""
  ha_proxy.routed_backend_servers:
    description: "Hash of the URL prefixes -> array of the router IPs acting as the HTTP/TCP backends (should include servers all Availability Zones being used)"
    default: {}
    example:
      routed_backend_servers:
        /images:
          servers: [10.0.0.2, 10.0.0.3]  # required - list of backend IPs to connect to
          port: 4443       # required - port haproxy should listen on
          backend_ssl: "verify"  # optional - enables ssl backend, one of `verify`, `noverify`, any other value assumes no ssl backend.
                                 # Setting `verify` requires `ha_proxy.backend_ca_file` key to be set.
          backend_verifyhost: example.com # optional - hostname to verify in the x509 certificate subject for SSL-enabled backend servers
                                          # only used if ba