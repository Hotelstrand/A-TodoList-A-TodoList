#!/bin/bash
#

set -e

export PATH=$PATH:/var/vcap/packages/haproxy/bin:/var/vcap/packages/ttar/bin
CONFIG=/var/vcap/jobs/haproxy/config/haproxy.config
PID_FILE=/var/vcap/sys/run/haproxy/haproxy.pid
DRAIN_LOCK=/var/vcap/sys/run/haproxy/drain.lock

cleanup_daemon() {
  if [ -f ${PID_FILE} ]; then
    pkill -F ${PID_FILE} || true
  fi
  rm -f /var/vcap/sys/run/haproxy/*
}

reload_daemon() {
    update_certs
    echo "$(date): Reloading HAProxy"
    # Relay the reload signal to the master process
    kill -USR2 "$(cat ${PID_FILE})"
    # Wait until master terminates
    while kill -0 $(cat ${PID_FILE}) 2>/dev/null; do sleep 1; done;
}

update_certs() {
  # reconstitute certs based on ttar file
  mkdir -p /var/vcap/jobs/haproxy/config/ssl
  ttar < /var/vcap/jobs/haproxy/config/certs.ttar

  <%- if p("ha_proxy.ext_crt_list") == true -%>
  # wait for optional external certs
  local ext_crt_list_file=<%= p("ha_proxy.ext_crt_list_file") %>
  local timeout=<%= p("ha_proxy.ext_crt_list_timeout") %>
  local policy=<%= p("ha_proxy.ext_crt_list_policy") %>
  <%- if not ["fail", "continue"].include?(p("ha_proxy.ext_crt_list_policy"))
       abort("ha_proxy.ext_crt_list_policy must be eithe